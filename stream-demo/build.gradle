
plugins {
    id 'application'

    id 'myproject.java-conventions'

    //这个插件提供shadowJar，来打包成一个fatJar。其实用处不大
    //id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.hjg'
version = '1.0-SNAPSHOT'

ext.mainClassName = 'com.hjg.stream.StreamApp'

application {
    mainClassName = "$mainClassName"
}

repositories {
    mavenCentral()

    /**
     * 必须加上这个方法，否则StreamApp无法通过编译。
     * 该方法会指示gradle从本地maven仓库寻找所依赖的工件。
     */
    mavenLocal()
}

dependencies {
    //implementation project(':entity')
    implementation 'com.hjg:entity:1.0-SNAPSHOT'

    implementation 'org.apache.commons:commons-lang3:3.13.0'

    implementation 'com.hjg:carEntity:1.0-SNAPSHOT'
    implementation 'com.hjg:trainEntity:1.0-SNAPSHOT'
}

tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'

    //sourceSets.main.output.files.each { println(it.getAbsolutePath())}
    /**
     * D:\github\gradle_demos\java_demos\stream-demo\build\classes\java\main
     * D:\github\gradle_demos\java_demos\stream-demo\build\resources\main
     */
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    manifest {
        attributes("Implementation-Title": "Gradle",
                "Implementation-Version": archiveVersion,
                'Main-Class' : "$mainClassName")
    }
}
